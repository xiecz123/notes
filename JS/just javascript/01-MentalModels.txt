请看下面的代码：

let a = 10;
let b = a;
a = 0;

运行后a和b的值是多少？在读下去之前先在脑子里想清楚。

如果您已经编写JavaScript一段时间了，您可能会反对：“这个代码片段比我每天编写的代码简单得多。有什么意义？”

这个练习的目的不是向你介绍变量。我们假设你已经熟悉他们了。相反，它是让你注意到并考虑你的心智模式。

What’s a Mental Model?
再次阅读上面的代码，以便真正确定结果是什么。（稍后我们将了解这个意图的重要性。）
当你读第二遍的时候，仔细注意你脑子里发生了什么，一步一步。你可能会注意到这样的独白：
let a = 10;
声明一个名为a的变量。将其设置为10。
let b = a;
声明一个名为b的变量。将其设置为a。
等等，怎么又是 a ？emmm，它是10。所以b也是10。
a = 0;
将a变量设置为0。
所以a现在是0，b是10。这就是我们的答案。
也许你的独白有点不同。也许你说的是“assign”而不是“set”，或者你读的顺序稍有不同。也许你得到了不同的结果。
注意到底有什么不同。请注意，即使是这段独白也无法捕捉到你脑海中真正发生的事情。
你可能会说“将b设置为a”，但是设置一个变量又意味着什么呢？
您可能会发现，对于每个熟悉的基本编程概念（如变量）和对其进行的操作（如设置其值），都存在一组与之相关的深层次类比。其中一些可能来自现实世界。
其他的可能会从你第一次学到的其他领域，比如数学中的数字，重新调整用途。这些类比可能重叠，甚至相互矛盾，但它们仍然可以帮助您理解代码中发生的事情。
例如，许多人第一次了解变量是“盒子”，你可以把东西放进去。即使当你看到一个变量时不再生动地想象盒子，它们在你的想象中仍然可能表现出“方形”。
这些对你大脑中某些东西如何运作的近似描述被称为“心智模型”。
如果你已经做了很长时间的编程，这可能很难，但是要注意和反省你的心智模型。它们可能是视觉、空间和机械的思维捷径的组合。
这些直觉（比如变量的“方盒子状”）影响着我们一生阅读代码的方式。但有时，我们的思维模式是错误的。也许我们早些时候读过的教程为了便于解释而牺牲了正确性。
也许我们错误地从我们之前学过的另一种语言中转移了对某一特定语言特征的直觉。
也许我们从一段代码中推断出了一个心理模型，却从未真正验证过它是否正确。
识别和修复这些问题是 just JavaScript 的全部功能。我们将逐步构建（或者，可能重建）您的JavaScript心智模型，使其更加准确和有用。
一个好的心智模型将帮助你更快地发现和修复错误，更好地理解别人的代码，并对你所写的代码充满信心。

（顺便说一下，a是0，b是10是正确答案。）

Coding, Fast and Slow

丹尼尔·卡尼曼的《思考，快与慢》是一本广受欢迎的非小说类书籍。它的中心论点是人类在思考时使用两种不同的“系统”。
只要有可能，我们就依靠“快速”系统。我们与许多动物共享这个系统，这给了我们惊人的能力，就像走路时不摔倒一样。
这个“快速”系统擅长模式匹配（生存所必需！）还有“肠道反应”。但它不擅长计划。
独特的是，由于额叶的发育，人类也拥有一个“慢”的思维系统。这个“慢”系统负责复杂的逐步推理。它让我们计划未来的事件，参与争论，或遵循数学证明。
因为使用“慢”系统会消耗我们的精神，所以我们倾向于默认“快”系统——即使在处理诸如编码这样的智力任务时也是如此。
假设您正在进行大量的工作，并且希望快速确定此函数的作用。请快速阅读下面的代码：

function duplicateSpreadsheet(original) {
  if (original.hasPendingChanges) {
    throw new Error('You need to save the file before you can duplicate it.');
  }
  let copy = {
    created: Date.now(),
    author: original.author,
    cells: original.cells,
    metadata: original.metadata,
  };
  copy.metadata.title = 'Copy of ' + original.metadata.title;
  return copy;
}

你可能已经注意到：

此函数用于复制电子表格。

如果原始电子表格未保存，则会引发错误。

它在新电子表格标题前加上“副本”。

你可能没有注意到的（如果你注意到了，那就太好了！）就是这个函数也意外地改变了原始电子表格的标题。

每一个程序员每天都会遇到这样的错误。但是现在你知道了一个bug的存在，你会以不同的方式阅读代码吗？
如果你一直在“快速”模式下阅读代码，你很可能会切换到更费劲的“慢”模式来找到它。

在“快速”模式下，我们根据命名、注释和整体结构来猜测代码的作用。在“慢”模式下，我们一步一步地追溯代码的作用。

这就是为什么拥有一个正确的心智模式是如此重要。在我们的头脑中模拟一台计算机已经够难的了，而且这种努力是浪费在错误的思维模式上的。

不要担心，如果你根本找不到bug。这意味着你将从这门课中得到最大的收获！在下一个模块中，我们将一起重建JavaScript的心理模型，这样您就可以清楚地看到这个bug了。

在下一个模块中，我们将开始为一些最基本的JavaScript概念（值和变量）构建心智模型。