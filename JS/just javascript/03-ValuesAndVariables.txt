我们将从一个小代码片段开始这个模块。

let reaction = 'yikes';
reaction[0] = 'l';
console.log(reaction);

你希望它做什么？我们还没有报道，所以如果你不确定的话也没关系。试着用你目前掌握的JavaScript知识来回答这个问题。
现在我想让你花点时间，一步一步地写下每一行代码的具体思考过程。注意你现有的心理模型中的任何差距或不确定性，并把它们也写下来。
如果你对此有任何疑问，尽量把它们说清楚。

答案就在这里。这段代码要么打印“yikes”，要么抛出一个错误，这取决于您是否处于严格模式。它永远不会印“喜欢”。

Yikes.

Primitive Values Are Immutable

你答对了吗？这看起来像是一个琐碎的问题，人们在JavaScrip面试中会问这种问题，但在实际操作中却很少出现。即便如此，它也说明了原始值的一个重要点。

I can’t change primitive values.

我将用一个小例子来解释这一点。字符串（它们是原始的）和数组（不是-它们是对象！）有一些表面上的相似之处。数组是一系列项，字符串是一系列字符：

let arr = [212, 8, 506];
let str = 'hello';

您可以像访问字符串的第一个字符一样访问第一个数组项。几乎感觉字符串是数组（但它们不是！）:

console.log(arr[0]); // 212
console.log(str[0]); // "h"

你可以改变 这个数组的第一项

arr[0] = 420;
console.log(arr); // [420, 8, 506]

因此，很容易假设您可以对字符串执行相同的操作：

str[0] = 'j'; // ???

但是你不能。

这里有一个重要的部分，我们需要添加到我们的心理模型。字符串是一个原始值。这意味着很大的意义！

所有原始值都是不可变的。“不变”是拉丁语中表达“不变”的一种奇特方式。只读。你不能搞乱原始值。完全。

如果您试图为一个原始值设置属性，不管是数字、字符串还是其他什么，JavaScript不会允许您这样做。这取决于您的代码是以哪种模式静默运行还是以静默方式拒绝请求。

但请放心，这永远行不通

let fifty = 50;
fifty.shades = 'gray'; // No!

像任何数字一样，50是一个原始值，不能对其设置属性。
在我的JavaScript世界中，所有原始值都存在于离我的代码类似遥远的恒星较远的外圈。这提醒我，即使我可以从代码中引用它们，我也不能更改它们。他们是什么样子。

我觉得这是一种奇怪的安慰

A Contradiction?

我刚刚证明了原始值是只读的，或者用我们这个时代的说法，是不可变的。这里有一个片段来测试你的心智模型。

let pet = 'Narwhal';
pet = 'The Kraken';
console.log(pet); // ?

如果你认为我是想搞乱你的脑袋，那你是完全正确的！答案是“The Kraken”—字符串的不变性不起作用。
如果你搞错了还没看到它来，不要绝望！最后这两个例子看起来肯定是互相矛盾的。

这是一个重要的认识。

当你刚接触一门语言时，你可能会忽略矛盾。毕竟，如果你追逐每一个矛盾，你会陷入一个深不可测的兔子洞。
但是现在你已经致力于建立一个心理模型，你需要质疑矛盾。它们揭示了心理模型的缺陷。


Variables Are Wires  // 变量是导线


让我们再一次看这个例子

let pet = 'Narwhal';
pet = 'The Kraken';
console.log(pet); // "The Kraken"

我们知道字符串值不能改变，因为它们是原始的。但是 pet 变量确实变为“The Krake”。怎么回事？

这似乎是一个矛盾，但事实并非如此。我们只说原始值是不能改变的。关于变量我们什么都没说！

当我们完善我们的心理模型时，我们可能需要理清相关概念。

变量不是值。

变量指向值。

在我的宇宙中，一个变量就是一根线。它有两个端点和一个方向：它从我代码中的一个名字开始，最后指向我宇宙中的某个值。

例如，我可以将pet变量指向“narhal”值

在那之后，我可以对变量做两件事。


Assigning a Value to a Variable // 给变量赋值


我可以做的第一件事是，给我的变量赋予一些其他的值
我在这里所做的就是指示JavaScript将左侧的“wire”（我的pet变量）指向右侧的值（“the Kraken”）。它将一直指向该值，除非我稍后重新分配它。

请注意，我不能把任何东西放在左边：

'war' = 'peace'; // Nope. (Try it in the console.) // Uncaught SyntaxError: Invalid left-hand side in assignment

等号的左侧必须是“wire”。目前，我们只知道变量是“线”。但还有另一种“电线”，我们将在后面的模块中讨论。也许，你能猜出是什么？（提示：它包含方括号或点，我们已经见过几次了。）

还有另一条规则。

赋值的右侧必须是表达式。它可以是简单的，如2或“hello”，或更复杂的表达式-例如：

pet = count + ' Dalmatians';

在这里，count+“Dalmatians”是一个表达式-对JavaScript来说是一个问题。JavaScript将用一个值来回答它（例如，“101只斑点狗”）。从现在起，宠物“wire”将开始指向该值。

如果右边必须是一个表达式，这是否意味着像2这样的数字或者像“The Kraken”这样的字符串也是表达式？对！这样的表达式被称为 literals - 因为我们逐字记下它们的值。


Reading a Value of a Variable  // 读取变量的值

我还可以读取变量的值-例如，打印它：

console.log（pet）；

这一点也不奇怪。

但是请注意，我们传递给console.log的不是pet变量. 我们可以通俗地说，但我们不能真正地将变量传递给函数。我们传递pet变量的当前值。这是怎么回事？

原来像pet这样的变量名也可以用作表达式！当我们编写pet时，我们问JavaScript一个问题：“pet的当前值是多少？为了回答我们的问题，JavaScript跟随宠物的“wire”，并在这个“wire”的末尾返回值。

所以同一个表达式可以在不同的时间给出不同的值！



Nouns and Verbs // 名词和动词

谁在乎你说的是“传递变量”还是“传递值”？这不是毫无希望的迂腐吗？我当然不鼓励打断你的同事去纠正他们——甚至是你自己。那会浪费每个人的时间。

但在你的头脑中，你需要清楚地知道你能用每一个概念做些什么。你不会滑自行车。你不能飞鳄梨。你不会唱歌的。你不能传递一个变量-至少，不能用JavaScript。

这里有一个小例子来说明为什么这些细节很重要。

function double(x) {
  x = x * 2
}

let money = 10;
double(money);
console.log(money); // ?

如果我们认为double（money）传递的是一个变量，我们可以预期x=x*2会使这个变量加倍。但这不是它的工作原理。我们知道double（money）的意思是“计算出货币的价值，然后将其传递给double”。所以答案是10。真是个骗局！

你脑子里有哪些不同的JavaScript名词和动词？它们是如何相互联系的？写下你最常用的一个简短的清单。

Putting It Together

现在让我们重温心智模型的第一个例子：

let x = 10;
let y = x;
x = 0;

我建议你拿一张纸或者一个绘图软件，一步一步地画出x和y变量的“线”发生了什么。

第一行没有做很多：

Declare a variable called x.
Make a wire for the x variable.
Assign to x the value of 10.
Point x’s wire to the value 10.

The second line is short, but it does quite a few things:
Declare a variable called y.
Make a wire for the y variable.
Assign to y the value of x.
Evaluate the expression: x.
The “question” we want to answer is x.
Follow the x’s wire — the answer is the value 10.
The x expression resulted in the value 10.
Therefore, assign to y the value of 10.
Point y’s wire to the value 10.
Finally, we get to the third line:
Assign to x the value of 0.
Point x’s wire to the value 0.

最后，x变量指向值0，y变量指向值10。请注意，y=x并不意味着y到x”。我们不能互相指向变量！变量总是指向值。当我们看到等号时，我们“询问”右侧的值，并将左侧的“导线”指向它。

我在《心智模型》中提到，把变量看作盒子是相当普遍的。我们正在建造的宇宙根本就没有盒子。它只有电线！这看起来有点烦人。为什么我们不能“将0和10个值放入变量中，而不是将变量指向它们？”？

对于解释许多其他概念，如严格相等、对象同一性和变异，使用连线将是非常重要的。我们将继续使用电线，所以你最好现在就开始习惯它们！

我的宇宙充满了电线

Recap // 简要回顾

原始值是不可变的。我们无法在代码中做任何事情来影响它们或以任何方式更改它们。他们保持原样。例如，我们不能为字符串值设置属性，因为它是一个基元值。数组不是原始的，所以我们可以设置它们的属性。

变量不是值。每个变量指向一个特定值。我们可以使用=赋值运算符更改它指向的值。

导线就像变量。“wire”不是JavaScript的概念，但它帮助我们想象变量如何指向值。还有一种不同的“线”不是变量，但我们还没有讨论过。

注意矛盾。如果你学到的两件事似乎相互矛盾，不要灰心。通常这是一个迹象，表明隐藏着一个更深层的真相。

名词和动词很重要。我们正在建立一个心理模型，这样我们就可以对宇宙中可能发生或不能发生的事情充满信心。随便说也可以，但我们的思维需要精确。
