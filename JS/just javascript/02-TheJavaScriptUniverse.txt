一开始要讲的就是 Value。

什么是Value？这很难去解释。

这就像问数学中的数字是什么，几何中的点是什么。 Value 是JavaScript领域中的一个东西。

数字是值，但其他一些东西也是，比如对象和函数。但是，很多东西，比如if语句或变量声明，都不是值。

Code and Values

为了在我的JavaScript程序中区分值和其他值，我喜欢想象Antoine de Saint-Exuperéry画的小王子：

我站在一颗小行星上-这是我程序的代码。


从表面上看，我可以看到if语句和变量声明、逗号、大括号以及JavaScript代码中可能找到的所有其他内容。
我的代码包含诸如“进行函数调用”或“多次执行此操作”，甚至“抛出错误”之类的指令。我一步一步地完成这些指令——在我的小行星上跑腿。
但偶尔，我会抬头看看。
在一个晴朗的夜晚，我在JavaScript天空中看到了不同的值：booleans, numbers, strings, symbols, functions and objects, null and undefined-哦，天哪！
我可能在我的代码中引用它们，但它们不存在于我的代码中。
在我的JavaScript世界中，值在空间中浮动。

“等等，”你可能会说，“我一直认为值就在我的代码中！在这里，我要你坚定信念。这个心智模型还需要几个模块才能得到回报。给我五分钟。

返回 values。大体上，有两种。

Primitive Values // 原始值

原始值包括数字和字符串等。打开浏览器的控制台并使用 console.log() 打印这些原始值

console.log(2);
console.log("hello");
console.log(undefined);

所有原始值都有共同点。我的代码中没有什么可以影响他们的。这听起来有点模糊，所以我们将在下一个模块中具体探讨这意味着什么。
现在，我要说的是，原始值就像恒星一样——寒冷而遥远，但当我需要它们时，它们总是在那里。
这是第一种 values。

Objects and Functions

对象和函数也是值，但它们不是原始的。这让他们很特别。继续在浏览器控制台中打印他们。

console.log({});
console.log([]);
console.log(x => x * 2);

请注意浏览器控制台的显示方式与原始值的显示方式不同。有些浏览器可能会在其前面显示一个箭头，或者在您单击它们时执行一些特殊操作。如果你安装了一些不同的浏览器（例如Chrome和Firefox），比较一下它们如何可视化对象和函数。

对象和函数是特殊的，因为我可以从代码中操作它们。例如，我可以将它们连接到其他值。这是相当模糊的-所以我们将在后面的模块中完善这个想法。现在，我可以说，如果原始值就像遥远的恒星，那么对象和函数就更像是漂浮在代码附近的岩石。它们离得很近，我可以操纵它们。

这是第二种 values。

你可能有问题。很好。如果你问一个问题，JavaScript世界可能会回答它！当然，前提是你知道怎么问。


Expressions  // 表达式


有很多问题JavaScript无法回答。如果你想知道是向你最好的朋友坦白你的真实感受，还是一直等到你俩都变成骷髅，JavaScript不会有太大帮助。

但是JavaScript很乐意回答一些问题。这些问题有一个特殊的名字，叫做表达式。

如果我们“询问”表达式2+2，JavaScript将用值4“回答”。

console.log(2 + 2); // 4

表达式是JavaScript可以回答的问题。JavaScript用它唯一知道的方式来回答表达式-用值

如果“表达式”这个词让你感到困惑，那就把它当作一段代码来表达一个值。你可能会听到有人说2+2“结果”或“计算结果”为4。这些都是说同一件事的不同方式。

我们问JavaScript 2+2，它的答案是4。表达式总是产生一个值。现在我们对表达方式的了解已经足够危险了！

我之前说过JavaScript值有很多种类型：数字、字符串、对象等等。我们如何知道特定值的类型？

这听起来像个问题。我们敢问吗？


Checking a Type


一开始，JavaScript宇宙中的所有值看起来都一样——天空中的亮点。
但是如果你仔细观察，你会发现只有不到十种不同类型的 values。相同类型的值的行为方式相似。
如果我们想检查一个值的类型，我们可以用typeof操作符来询问它。
JavaScript将用一个预先确定的字符串值来回答我们的问题，比如“number”、“string”或“object”。

下面是一些可以在浏览器控制台中尝试的示例：

console.log(typeof(2)); // "number"
console.log(typeof("hello")); // "string"
console.log(typeof(undefined)); // "undefined"

这里，typeof（2）是一个表达式，它产生“number”值。

严格地说，在typeof中不需要使用parens。例如，typeof2和typeof（2）的工作原理一样好。然而，有时需要使用parens来避免歧义。
如果我们省略typeof后面的parens，下面的其中一个案例就会破裂。试着猜猜是哪一个：

console.log(typeof({})); // "object"
console.log(typeof([])); // "object"
console.log(typeof(x => x * 2)); // "function"

您可以在浏览器控制台中验证您的猜测。

现在再看一下最后三个例子——这次要密切关注它们的结果。你觉得这些结果令人惊讶吗？为什么？

Types of Values

作为一个有抱负的天文学家，您可能想知道JavaScript天空中可以观测到的每种类型的值。在对JavaScript进行了近25年的研究之后，科学家们只发现了9种这样的类型：

Primitive Values
Undefined (undefined), used for unintentionally missing values.
Null (null), used for intentionally missing values.
Booleans (true and false), used for logical operations.
Numbers (-100, 3.14, and others), used for math calculations.
Strings ("hello", "abracadabra", and others), used for text.
Symbols (uncommon), used to hide implementation details.
BigInts (uncommon and new), used for math on big numbers.


Objects and Functions
Objects ({} and others), used to group related data and code.
Functions (x => x * 2 and others), used to refer to code

No Other Types

你可能会问：“但是我使用过的其他类型呢，比如数组呢？”

在JavaScript中，除了我们刚才列举的那些类型之外，没有其他基本的值类型。
剩下的都是 objects！例如，甚至数组、日期和正则表达式基本上都是JavaScript中的对象：

“我明白了，”你可能会回答，“这是因为一切都是对象！“唉，这是一个流行的城市传说，但不是真的。
虽然像“hi”.toUpperCase（）这样的代码使“hi”看起来像一个对象，但这只是一个错觉。JavaScript在执行此操作时会创建一个包装器对象，然后立即丢弃它。
如果这个机制还不太灵巧，那就没问题了。现在，您只需要记住基本值（如数字和字符串）不是对象。

Recap

让我们回顾一下我们目前所知道的：

有 values，还有其他一切。我们可以将值视为JavaScript领域中“浮动”的不同事物。它们不存在于我们的代码中，但我们可以从代码中引用它们。

有两类值：一类是原始值，另一类是对象和函数。共有九种类型。每种类型都有特定的用途，但有些很少使用。

有些values是孤独的。例如，null是null类型的唯一值，undefined是未定义类型的唯一值。我们将在后面了解到，这两个孤独的values是相当麻烦的制造者！

我们可以用表达式提问。JavaScript会用值来回答我们。例如，2+2表达式的答案是4。

我们可以用一个表达式类型来检验某物的类型。例如，typeof（4）是字符串值“number”

Exercises

我们现在该学会怎么做了。

即使你已经有相当丰富的JavaScript经验，也不要跳过练习题！我个人在几年前就学会了这些东西。

单击此处回答这些问题并提供有关本模块的反馈。当你完成练习后，我会马上发送下一个模块。

接下来我们将更详细地探讨原始值。我们来看看这些不同的基本类型（如数字和Null）的共同点，并了解JavaScript中相等的含义。

我们还将继续完善我们的心理模型。这个模块展示了一个粗略的草图-一个近似值。我们将关注图片的不同部分，并用更多的细节填充它们，比如渐进式JPEG图像。

这些看起来像是小步骤，但我们正在为未来的一切奠定基础。我们一起构建JavaScript世界。